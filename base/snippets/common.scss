/**
 * Any non-site-specific tools and code snippets
 *
 * @author Thomas Bredin-Grey <thomas@panmedia.co.nz>
 * @author Hemi Ormsby <hemi@panmedia.co.nz>
 * @url https://github.com/tbredin/OnionKnight
 */

// Returns a unitless number
@function no-unit($number) {
    $result: 0;
    @if unit($number) == "px" {
        $result: $number / 1px;
    } @else if unit($number) == "em" {
        $result: $number / 1em;
    } @else if unit($number) == "%" {
        $result: $number / 1%;
    }
    @return $result;
}


// Converts an em value to px. Should only work in absolute em document context (root level)
@function em-to-px($value) {
    @if unit($value) == "em" {
        $value : no-unit($value) * no-unit($base-font-size);
        $value : $value * 1px;
    }
    @return $value;
}


// Converts a px value to ems. Should only work in absolute em document context (root level), unless $context is specified
@function px-to-ems($value, $context: $base-font-size) {
    @if unit($context) == "em" {
        $context: em-to-px($context);
    }
    @if unit($value) == "px" {
        $value : no-unit($value) / no-unit($context);
        $value : $value * 1em;
    }
    @return $value;
}


// cross-browser rem units.
@mixin rem($property, $value) {
    #{$property}: $value * $base-font-size;
    #{$property}: #{$value}rem;
}


// embosses box
@mixin box-emboss($opacity, $opacity2){
    box-shadow: white($opacity) 0 1px 0, inset black($opacity2) 0 1px 0;
}


// Gradient with background color fallback for legacy browsers
@mixin gradient-with-bgc($colors...) {
    $length: length($colors);
    //output bgc before gradient so that transparent gradients will work in modern browsers, or ie9 will display background color when svg support is turned off
    @if $legacy-support-for-ie == false {
        background-color: mix(nth($colors, 1), nth($colors, $length));
        @include background(linear-gradient($gradient-startpoint, $colors...));
    }

    //output bgc after gradient for legacy browsers
    @if $legacy-support-for-ie == true {
        background-color: mix(nth($colors, 1), nth($colors, $length));
    }
}


// Gradient with svg fallback for ie9
@mixin gradient-with-svg($colors...) {
    $length: length($colors);
    //output bgc before gradient so that transparent gradients will work in modern browsers, or ie9 will display background color when svg support is turned off
    @if $legacy-support-for-ie == false {
        background-color: mix(nth($colors, 1), nth($colors, $length));
        $experimental-support-for-svg: true;
        @include background(linear-gradient($gradient-startpoint, $colors...));
    }

    //output bgc after gradient for legacy browsers
    @if $legacy-support-for-ie == true {
        background-color: mix(nth($colors, 1), nth($colors, $length));
    }
}


// directional gradient
@mixin gradient-directional($startpoint, $colors...) {
    $length: length($colors);
    //output bgc before gradient so that transparent gradients will work in modern browsers, or ie9 will display background color when svg support is turned off
    @if $legacy-support-for-ie == false {
        background-color: mix(nth($colors, 1), nth($colors, $length));
        @include background(linear-gradient($startpoint, $colors...));
    }

    //output bgc after gradient for legacy browsers
    @if $legacy-support-for-ie == true {
        background-color: mix(nth($colors, 1), nth($colors, $length));
    }
}

// radial gradient with background color fallback for legacy browsers
@mixin radial-gradient-with-bgc($startpoint, $colors...) {
    $length: length($colors);
    $first: nth(nth($colors, 1), 1);
    $second: nth(nth($colors, $length), 1);
    //output bgc before gradient so that transparent gradients will work in modern browsers, or ie9 will display background color when svg support is turned off
    @if $legacy-support-for-ie == false {
        background-color: mix($first, $second);
        @include background(radial-gradient(circle at $startpoint, $colors) repeat scroll 0 0 transparent);
    }

    //output bgc after gradient for legacy browsers
    @if $legacy-support-for-ie == true {
        background-color: mix($first, $second);
    }
}


// resets lists
%plain-list {
    list-style: none;
    padding-left: 0;

    > li {
        list-style: none;
        padding-left: 0;
    }
}


// block item  - where text needs to be hidden for image replacement (usually)
@mixin block-item($x, $y: $x) {
    @extend %block-properties;
    padding-top: $y;
    width: $x;
}


// block item helper
%block-properties {
    overflow: hidden;
    height: 0;
    display: block;
}


// new clearfix hack
@mixin clearfix {
    &:before,
    &:after {
        content: " "; /* 1 */
        display: table; /* 2 */
    }

    &:after { clear: both; }

    // For IE 6/7 only
    // Include this rule to trigger hasLayout and contain floats.
    *zoom: 1;
}

// new clearfix hack - extend
%clearfix {
    @include clearfix;
}


// selection color
// includes futureproofing for support of gradients (not surrently in spec)
@mixin selection-color($background, $color: false, $text-shadow: false) {
    @if $legacy-support-for-ie == false {
        ::selection {
            @include gradient-with-bgc(lighten($background, 4%), $background, darken($background, 4%));
            @if $color != false {
                color: $color;
            }
            @if $text-shadow == false {
                text-shadow: none;
            } @else {
                text-shadow: $text-shadow;
            }
        }
    }
    @if $experimental-support-for-mozilla == true {
        ::-moz-selection {
            @include gradient-with-bgc(lighten($background, 4%), $background, darken($background, 4%));
            @if $color != false {
                color: $color;
            }
            @if $text-shadow == false {
                text-shadow: none;
            } @else {
                text-shadow: $text-shadow;
            }
        }
    }
}


// For future support for blend modes. Can be tested in Chromium
@mixin blend-mode($mode) {
    @if $legacy-support-for-ie == false {
        -webkit-blend-mode: $mode;
        -moz-blend-mode: $mode;
        -ms-blend-mode: $mode;
        blend-mode: $mode;
    }
}


// code font
%code-font { font-family: $code-font; }

// heading font
%heading-font { font-family: $heading-font; }


// common padding
%standard-padding {
    padding: 10/16 * $grid-padding $grid-padding $grid-padding;
    // (by default: 10/16 * 16 (base font size) = 10px top padding)
}


// better than writing longhand rgba for transparent black
@function black($opacity){
    @return rgba(0, 0, 0, $opacity);
}


// better than writing longhand rgba for transparent white
@function white($opacity){
    @return rgba(255, 255, 255, $opacity);
}


// multi-line text-overflow
// NOTE: usage needs to be very specific and is as follows:
// First, wrap your text element in a div and apply this mixin to it.
// Tweak the height (in your editor - this won't work in dev tools)
// until the ellipsis appears, and be careful that the ellipsis
// doesn't show for content that only *just* fits.
@mixin multiline-text-overflow($height, $color: #fff, $in-media: false) {
    @if ($in-media == true) {
        @include multiline-text-overflow-common;
    } @else {
        @extend %multiline-text-overflow;
    }

    @include multiline-text-overflow-height($height);

    $rgba: rgba($color, 1);
    $rgb0: transparentize($rgba, 1);

    &:after {
        @include background(linear-gradient(left top, $rgb0, $rgba, $rgba));
    }
}


//resets the height of the overflowed element - for less bloated output with media queries
@mixin multiline-text-overflow-height($height) {
    height: $height;

    &:before {
        height: $height;
    }
}


// helpers for above (emulates text overflow on multilines)
// shouldn't need to use these directly
@mixin multiline-text-overflow-common {
    overflow: hidden;

    &:before {
        content:"";
        float: left;
        width: 5px;
    }
     > *:first-child {
        float: right;
        width: 100%;
        margin-left: -5px;
    }

    > *:last-child {
        padding-bottom: 0;
        margin-bottom: 0;
    }

    &:after {
        content: "\02026";

        @include box-sizing(content-box);

        float: right;
        position: relative;
        top: -25px;
        left: 100%;
        width: 3em;
        margin-left: -3em;
        padding-right: 5px;
        text-align: right;
        background-size: 100% 100%;
    }
}

%multiline-text-overflow {
    @include multiline-text-overflow-common;
}


//single line text overflow extend
%text-overflow {
    @include ellipsis;
}

// faded text-overflow effect
// can accept different heights for different breakpoints
@mixin set-fade-overflow($height, $bg) {
    height: auto;
    max-height: $height;
    @extend %set-fade-overflow-common;

    &:before {
        @include background(linear-gradient(top, transparentize($bg, 1), $bg));
    }
}

%set-fade-overflow-common {
    position: relative;
    overflow: hidden;

    &:before {
        content: "";
        position: absolute;
        pointer-events: none;
        cursor: text;
        left: 0;
        bottom: 0;
        width: 100%;
        z-index: 10;
        height: 85%;
    }
}

// Sets border-box, as well as width, height, padding and border width, including legacy fallbacks
@mixin legacy-border-box($width: auto, $height: auto, $padding: 0 0 0 0, $border-width: 0 0 0 0) {
    @extend %border-box;

    @if $legacy-support-for-ie {
        @if $width != auto {
            width: $width;
            *width: $width - nth($padding, 2) - nth($padding, 4) - nth($border-width, 2) - nth($border-width, 4);
        }
        @if $height != auto {
            height: $height;
            *height: $height - nth($padding, 1) - nth($padding, 3) - nth($border-width, 1) - nth($border-width, 3);
        }
        padding: $padding;
        border-width: $border-width;
    }
}


// vendor prefixes values of rules
@mixin vendor($property, $value) {
    @each $vendor in webkit, moz, ms, o {
        #{$property}: -#{$vendor}-#{$value};
    }
    #{$property}: #{$value};
}


// vendor prefixes selectors of rules
@mixin vendor-property($property, $value) {
    @each $vendor in webkit, moz, ms, o {
        -#{$vendor}-#{$property}: #{$value};
    }
    #{$property}: #{$value};
}


// For Susy: use when overriding the susy "span-columns" mixin.
// unlike span-columns, this will only reapply the width and padding so that
// output styles aren't bloated with uneccessay floats & display properties
@mixin span-override(
    $columns,
    $context       : $total-columns,
    $padding       : false,
    $from          : $from-direction
) {
    $to       : opposite-position($from);
    $pos      : split-columns-value($columns,position);
    $cols     : split-columns-value($columns,columns);
    $pad-from : relative-width(0 * $gutter-width, $context);
    $pad-to   : relative-width(0 * $gutter-width, $context);

    @if $padding != false {
        $pad-from : nth($padding, 1);

        @if length($padding) > 1 {
            $pad-to: nth($padding, 2);
        } @else {
            $pad-to: $pad-from;
        }

        $pad-from : relative-width($pad-from, $context);
        $pad-to   : relative-width($pad-to, $context);

        padding-#{$from}: $pad-from;
        padding-#{$to}: $pad-to;
    }

    width: columns($cols, $context) - if($border-box-sizing, 0, $pad-to + $pad-from);

    @if ($pos == 'omega') {
        @include omega;
    } @else {
        margin-#{$to}: gutter($context);
    }
}


//box shadow emboss top & bottom
@mixin box-emboss($opacity, $opacity2){
    box-shadow:white($opacity) 0 1px 0, inset black($opacity2) 0 1px 0;
}


//placeholder text
@mixin placeholder {
    &.placeholder { @content; }

    //only output for modern browsers
    @if $experimental-support-for-mozilla == true {
        &:-moz-placeholder { @content; }
        &::-moz-placeholder { @content; }
    }
    @if $experimental-support-for-webkit == true {
        &::-webkit-input-placeholder { @content; }
    }
}


//initialises pan picturefill helper css
//this is required for responsive images to work (and can be included below)
@mixin picture-init($classname: picture) {
    .#{$classname} {
        font-family: "0" !important;
        @include at-breakpoint($above-medium) {
            font-family: "#{no-unit($medium-width)}" !important;
        }
        @include at-breakpoint($above-large) {
            font-family: "#{no-unit($large-width)}" !important;
        }
        @include at-breakpoint($above-xlarge) {
            font-family: "#{no-unit($xlarge-width)}" !important;
        }
    }
}

//@include picture-init;

%border-radius {
    @include border-radius($border-radius);
}

%no-border-radius {
    @include border-radius(0);
}

%transition-all-smooth {
    @include transition(all 0.5s ease);
}

%no-box-shadow {
    @include box-shadow(none);
}

%border-box {
    @include box-sizing(border-box);
}

%appearance-none {
    @include appearance(none);
}


// centers a grid wrapper
%center-grid {
    float: none;
    display: block;
    margin: 0 auto;
    position: relative;
}


// removes border
%no-border {
    border-width: 0;
}


// susy grid forced omega
%force-omega { margin-right: 0!important; }


// forces hasLayout for legacy IEs
%hasLayout {
    position: relative;
    zoom: 1;
}


// hides on mobile
%no-mobile {
    display: none;
    @include at-breakpoint($above-medium) { display: inline; }
}

// hides on desktop
%mobile-only {
    display: inline-block;
    @include at-breakpoint($above-medium) { display: none; }
}


// for applying hi-dpi images
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}


// center block elements
%center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}


// cross browser rem font sizes
@mixin rem-font-size($size: 12 ){
    font-size: $size + px; //fallback for old browsers
    font-size: ($size / no-unit($base-font-size)) + rem;
}


//text shadow extends
%dark-text-shadow { @include text-shadow(rgba(0, 0, 0, 0.3) -1px -1px 0); }
%light-text-shadow { @include text-shadow(rgba(255, 255, 255, 0.0) -1px -1px 0); }


// webkit fixes for the rendering mode on animated text
@mixin fix-webkit-font-smoothing {
    @if $experimental-support-for-webkit == true {
        -webkit-transform: translateZ(0px);             // forces hardware accelleration, thus respecting -webkit-font-smoothing
        -webkit-font-smoothing: subpixel-antialiased;   // the preferred anti-aliasing method
    }
}


// XMod Site builder Grids
@mixin xsb-grid($sml, $med, $lrg, $xlrg: $lrg, $context-sml: false, $context-med: false, $context-lrg: false, $context-xlrg: false) {
    //check if context has been passed
    @if $context-sml == false and $context-med == false and $context-lrg == false and $context-xlrg == false {
        //gen classes
        .xsb-grid__#{$sml}-#{$med}-#{$lrg}-#{$xlrg} {
            @include span-columns($sml);

            @include at-breakpoint($above-medium) {
               @include span-columns($med, $medium-cols);
            }
            @include at-breakpoint($above-large) {
                @include span-columns($lrg, $large-cols);
            }
            @include at-breakpoint($above-xlarge) {
                @include span-columns($xlrg, $xlarge-cols);
            }
        }
        .xsb-grid__#{$sml}-#{$med}-#{$lrg}-#{$xlrg}_omega {
            @include span-columns($sml omega);
            @include at-breakpoint($above-medium) {
                @include span-columns($med omega, $medium-cols);
            }
            @include at-breakpoint($above-large) {
                @include span-columns($lrg omega, $large-cols);
            }
            @include at-breakpoint($above-xlarge) {
                @include span-columns($xlrg omega, $xlarge-cols);
            }
        }
    } @else {
        //set defaults to any unset contexts
        @if $context-sml == false {
            $context-sml: $small-cols;
        }
        @if $context-med == false {
            $context-med: $medium-cols;
        }
        @if $context-lrg == false {
            $context-lrg: $large-cols;
        }
        @if $context-xlrg == false {
            $context-xlrg: $xlarge-cols;
        }

        //gen classes
        .xsb-grid__#{$sml}-#{$med}-#{$lrg}-#{$xlrg}--#{$context-sml}-#{$context-med}-#{$context-lrg}-#{$context-xlrg} {
            @include span-columns($sml, $context-sml);

            @include at-breakpoint($above-medium) {
                @include span-columns($med, $context-med);
            }
            @include at-breakpoint($above-large) {
                @include span-columns($lrg, $context-lrg);
            }
            @include at-breakpoint($above-xlarge) {
                @include span-columns($xlrg, $context-xlrg);
            }
        }
        .xsb-grid__#{$sml}-#{$med}-#{$lrg}--#{$context-sml}-#{$context-med}-#{$context-lrg}-#{$context-xlrg}_omega {
            @include span-columns($sml omega, $context-sml);
            @include at-breakpoint($above-medium) {
                @include span-columns($med omega, $context-med);
            }
            @include at-breakpoint($above-large) {
                @include span-columns($lrg omega, $context-lrg);
            }
            @include at-breakpoint($above-xlarge) {
                @include span-columns($xlrg omega, $context-xlrg);
            }
        }
    }
}


%scaling-img {
    display: block;
    width: 100%;
    height: auto;
}


//for testing susy grids at all default OnionKnight breakpoints
@mixin test-grids {
    @include susy-grid-background;

    @include at-breakpoint($above-medium) {
        @include susy-grid-background;
    }
    @include at-breakpoint($above-large) {
        @include susy-grid-background;
    }
    @include at-breakpoint($above-xlarge) {
        @include susy-grid-background;
    }
}


//breadcrumbs
@mixin breadcrumbs($color) {
    .xmod-bread-crumb {
        padding-top: 1em;
        font-family: $heading-font;
        font-size: px-to-ems(14px);
        color: $color;

        a {
            color: $color;
            font-family: $heading-font;
            text-decoration: none;
            opacity: 0.75;
            @include transition(opacity 0.2s linear);

            &:hover {
                opacity: 0.85;
                text-decoration: underline;
            }

            &:last-child {
                opacity: 1;

                &:hover {
                    opacity: 1;
                }
            }
        }
    }
}
